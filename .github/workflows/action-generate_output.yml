---
# Regenerate cvar list outputs and push updates.
name: Generate Output

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0"
  push:
    branches: ["main"]

# Minimal required permissions for pushing content updates
permissions:
  contents: write

concurrency:
  group: generate_output-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  create-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Generate matrix
        run: chmod +x scripts/generate-matrix.sh && scripts/generate-matrix.sh

      - name: Set Matrix
        id: set-matrix
        run: |
          shortnamearray=$(cat shortnamearray.json)
          echo "${shortnamearray}"
          echo "matrix=${shortnamearray}" >> "$GITHUB_OUTPUT"

  generate-output:
    needs: create-matrix
    continue-on-error: true
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix: ${{ fromJSON(needs.create-matrix.outputs.matrix) }}
      max-parallel: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Prepare git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Sync with remote main
        run: |
          git fetch origin main
          git rebase origin/main || (echo "Rebase failed; falling back to merge" && git rebase --abort && git merge --no-edit origin/main)

      - name: Run get_cvars.sh
        run: chmod +x scripts/get_cvars.sh && scripts/get_cvars.sh "${{ matrix.shortname }}"

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> "$GITHUB_OUTPUT"

      - name: Commit & push (rebase to avoid non-fast-forward)
        env:
          DATE: ${{ steps.date.outputs.date }}
          SHORTNAME: ${{ matrix.shortname }}
        run: |
          set -e
          git add -- *.txt shortnamearray.json || true
          if git diff --cached --quiet; then
            echo "No changes detected for ${SHORTNAME}; skipping push."; exit 0
          fi

          commit_msg="cvarlist(${SHORTNAME}): automated update ${DATE}"
          git commit -m "$commit_msg" || echo "Nothing to commit"
          for attempt in 1 2 3; do
            echo "Attempt $attempt: rebase & push"
            if git fetch origin main && git rebase origin/main; then
              if git push origin HEAD:main; then echo "Push succeeded"; break; fi
            fi
            if [ "$attempt" -eq 3 ]; then
              echo "Final attempt failed; trying force-with-lease"
              git push --force-with-lease origin HEAD:main || exit 1
            else
              echo "Retrying after 5s..."; sleep 5
            fi
          done

      - name: Sleep for 10s
        uses: juliangruber/sleep-action@v2
        with:
          time: 10s
